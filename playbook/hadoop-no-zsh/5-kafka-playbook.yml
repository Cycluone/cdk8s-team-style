- hosts: hadoops
  remote_user: root
  vars:
    tar_gz_file_name: "kafka_2.11-2.4.1.tgz"
    install_folder: "/usr/local"
    zookeeper_home_path: "{{ install_folder }}/apache-zookeeper-3.5.7-bin"
    home_path: "{{ install_folder }}/kafka_2.11-2.4.1"
    config_path: "{{ home_path }}/config"
  tasks:
    - name: echo JAVA_HOME
      debug:
        msg: "'{{ lookup('env', 'JAVA_HOME') }}' -- is environment variable"

    - name: get environment variable JAVA_HOME
      set_fact:
        JAVA_HOME_VAR: "{{ lookup('env', 'JAVA_HOME')}}"
    - name: check JAVA_HOME environment variable
      fail:
        msg: "Environment variable JAVA_HOME is not defined or empty"
      when: JAVA_HOME_VAR == ""

    - name: check zookeeper folders exist
      stat:
        path: "{{ zookeeper_home_path }}"
      register: register_result
    - name: check zookeeper folders exist fail
      fail:
        msg: "check zookeeper folders exist fail"
      when: not register_result.stat.exists

    - name: copy tar.gz
      copy:
        src=/opt/software/{{ tar_gz_file_name }}
        dest={{ install_folder }}

    - name: tar gz
      shell:
        chdir={{ install_folder }}
        tar zxf {{ tar_gz_file_name }}

    - name: remove tar.gz file
      file:
        path: "{{ install_folder }}/{{ tar_gz_file_name }}"
        state: absent

    - name: create logs directory
      file:
        path: "{{ item }}"
        state: directory
      with_items:
        - "{{ home_path }}/logs"

    - name: set KAFKA_HOME
      blockinfile:
        path: /root/.bashrc
        marker: "#{mark} kafka ENV"
        block: |
          export KAFKA_HOME={{ home_path }}
          export PATH=$PATH:$KAFKA_HOME/bin
    - name: source bashrc
      shell: source /root/.bashrc




- hosts: header1
  remote_user: root
  vars:
    install_folder: "/usr/local"
    home_path: "{{ install_folder }}/kafka_2.11-2.4.1"
    config_path: "{{ home_path }}/config"
    logs_path: "{{ home_path }}/logs"
  tasks:
    - name: copy server.properties
      copy:
        src="{{ config_path }}/server.properties"
        dest="{{ config_path }}/server.properties.back"
    - name: remove server.properties
      file:
        path: "{{ config_path }}/server.properties"
        state: absent
    - name: create server.properties
      file:
        path="{{ config_path }}/{{ item }}"
        state=touch
        mode=777
      with_items:
        - server.properties
    - name: set server.properties
      blockinfile:
        path: "{{ config_path }}/server.properties"
        marker: ""
        block: |
          #broker的全局唯一编号，不能重复
          broker.id=1
          #删除topic功能使能
          delete.topic.enable=true
          #配置连接Zookeeper集群地址，末尾的/kafka可选，但是建议配置上，因为注册到ZooKeeper的除了kafka可能还有其他服务，增加根目录便于区分
          zookeeper.connect=header1:2181,worker1:2181,worker2:2181/kafka
          num.network.threads=3
          num.io.threads=8
          socket.send.buffer.bytes=102400
          socket.receive.buffer.bytes=102400
          socket.request.max.bytes=104857600
          log.dirs={{ logs_path }}
          num.partitions=1
          num.recovery.threads.per.data.dir=1
          offsets.topic.replication.factor=1
          transaction.state.log.replication.factor=1
          transaction.state.log.min.isr=1
          log.retention.hours=168
          log.segment.bytes=1073741824
          log.retention.check.interval.ms=300000
          zookeeper.connect=localhost:2181
          zookeeper.connection.timeout.ms=6000
          group.initial.rebalance.delay.ms=0
    - name: remove blank lines blockinfile
      lineinfile :
        path: "{{ config_path }}/server.properties"
        regexp: "^$"
        state: absent





- hosts: worker1
  remote_user: root
  vars:
    install_folder: "/usr/local"
    home_path: "{{ install_folder }}/kafka_2.11-2.4.1"
    config_path: "{{ home_path }}/config"
    logs_path: "{{ home_path }}/logs"
  tasks:
    - name: copy server.properties
      copy:
        src="{{ config_path }}/server.properties"
        dest="{{ config_path }}/server.properties.back"
    - name: remove server.properties
      file:
        path: "{{ config_path }}/server.properties"
        state: absent
    - name: create server.properties
      file:
        path="{{ config_path }}/{{ item }}"
        state=touch
        mode=777
      with_items:
        - server.properties
    - name: set server.properties
      blockinfile:
        path: "{{ config_path }}/server.properties"
        marker: ""
        block: |
          #broker的全局唯一编号，不能重复
          broker.id=2
          #删除topic功能使能
          delete.topic.enable=true
          #配置连接Zookeeper集群地址，末尾的/kafka可选，但是建议配置上，因为注册到ZooKeeper的除了kafka可能还有其他服务，增加根目录便于区分
          zookeeper.connect=header1:2181,worker1:2181,worker2:2181/kafka
          num.network.threads=3
          num.io.threads=8
          socket.send.buffer.bytes=102400
          socket.receive.buffer.bytes=102400
          socket.request.max.bytes=104857600
          log.dirs={{ logs_path }}
          num.partitions=1
          num.recovery.threads.per.data.dir=1
          offsets.topic.replication.factor=1
          transaction.state.log.replication.factor=1
          transaction.state.log.min.isr=1
          log.retention.hours=168
          log.segment.bytes=1073741824
          log.retention.check.interval.ms=300000
          zookeeper.connect=localhost:2181
          zookeeper.connection.timeout.ms=6000
          group.initial.rebalance.delay.ms=0
    - name: remove blank lines blockinfile
      lineinfile :
        path: "{{ config_path }}/server.properties"
        regexp: "^$"
        state: absent






- hosts: worker2
  remote_user: root
  vars:
    install_folder: "/usr/local"
    home_path: "{{ install_folder }}/kafka_2.11-2.4.1"
    config_path: "{{ home_path }}/config"
    logs_path: "{{ home_path }}/logs"
  tasks:
    - name: copy server.properties
      copy:
        src="{{ config_path }}/server.properties"
        dest="{{ config_path }}/server.properties.back"
    - name: remove server.properties
      file:
        path: "{{ config_path }}/server.properties"
        state: absent
    - name: create server.properties
      file:
        path="{{ config_path }}/{{ item }}"
        state=touch
        mode=777
      with_items:
        - server.properties
    - name: set server.properties
      blockinfile:
        path: "{{ config_path }}/server.properties"
        marker: ""
        block: |
          #broker的全局唯一编号，不能重复
          broker.id=3
          #删除topic功能使能
          delete.topic.enable=true
          #配置连接Zookeeper集群地址，末尾的/kafka可选，但是建议配置上，因为注册到ZooKeeper的除了kafka可能还有其他服务，增加根目录便于区分
          zookeeper.connect=header1:2181,worker1:2181,worker2:2181/kafka
          num.network.threads=3
          num.io.threads=8
          socket.send.buffer.bytes=102400
          socket.receive.buffer.bytes=102400
          socket.request.max.bytes=104857600
          log.dirs={{ logs_path }}
          num.partitions=1
          num.recovery.threads.per.data.dir=1
          offsets.topic.replication.factor=1
          transaction.state.log.replication.factor=1
          transaction.state.log.min.isr=1
          log.retention.hours=168
          log.segment.bytes=1073741824
          log.retention.check.interval.ms=300000
          zookeeper.connect=localhost:2181
          zookeeper.connection.timeout.ms=6000
          group.initial.rebalance.delay.ms=0
    - name: remove blank lines blockinfile
      lineinfile :
        path: "{{ config_path }}/server.properties"
        regexp: "^$"
        state: absent




- hosts: hadoops
  remote_user: root
  vars:
    install_folder: "/usr/local"
    home_path: "{{ install_folder }}/kafka_2.11-2.4.1"
  tasks:
    - name: start kafka
      shell: "{{ item }}"
      with_items:
        - "sh {{ home_path }}/bin/kafka-server-start.sh {{ home_path }}/config/server.properties"
